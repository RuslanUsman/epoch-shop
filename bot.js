import dotenv from "dotenv"
import TelegramBot from "node-telegram-bot-api"
import { createClient } from "@supabase/supabase-js"

dotenv.config()

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase-–∫–ª–∏–µ–Ω—Ç —Å service-role –∫–ª—é—á–æ–º
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true })

// -------------------------
// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
// -------------------------
bot.on("callback_query", async (callbackQuery) => {
  const { id: cbId, data = "", message, from } = callbackQuery
  const parts  = data.split("|") // —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
  const action = parts[0]        // "take", "credit" –∏–ª–∏ "vip"
  const orderId = parts[1]       // ID –∑–∞–∫–∞–∑–∞/–∑–∞—è–≤–∫–∏
  const buyerKey = parts[2]      // UUID (–¥–ª—è –∑–∞–∫–∞–∑–æ–≤) –∏–ª–∏ telegram_name (–¥–ª—è VIP)
  const points  = action === "credit"
    ? parseInt(parts[3], 10) || 0
    : 0

  console.log("Callback data:", data, "Action:", action, "OrderId:", orderId, "BuyerKey:", buyerKey)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
  const kb = message?.reply_markup?.inline_keyboard
  if (!kb) {
    return bot.answerCallbackQuery(cbId, { text: "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" })
  }

  const goButton  = kb[0][0]   // –∫–Ω–æ–ø–∫–∞ ¬´–ü–µ—Ä–µ–π—Ç–∏¬ª

  // 1) –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–í–∑—è—Ç—å –∑–∞–∫–∞–∑¬ª
  if (action === "take") {
    const adminName = from.username || from.first_name || "admin"
    const takeLabel = {
      text:          `üü¢ –í–∑—è–ª: @${adminName}`,
      callback_data: "none"
    }
    const creditRow = kb[2]

    await bot.editMessageReplyMarkup(
      { inline_keyboard: [[goButton], [takeLabel], [creditRow[0]]] },
      { chat_id: message.chat.id, message_id: message.message_id }
    )

    await supabase
      .from("orders")
      .update({
        taker_id:       from.id,
        taker_username: adminName
      })
      .eq("id", orderId)

    return bot.answerCallbackQuery(cbId)
  }

  // 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–ó–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã¬ª
  if (action === "credit") {
    const { data: profileData } = await supabase
      .from("profiles")
      .select("points")
      .eq("id", buyerKey) // –∑–¥–µ—Å—å –æ—Å—Ç–∞—ë—Ç—Å—è id (UUID)
      .single()

    const currentPoints = profileData?.points || 0
    const newPoints     = currentPoints + points

    await supabase.from("profiles").update({ points: newPoints }).eq("id", buyerKey)
    await supabase.from("orders").update({ bonus_given: points }).eq("id", orderId)

    const takeRow = kb[1]
    const creditLabel = {
      text:          `‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ ${points} –±–∞–ª–ª–æ–≤`,
      callback_data: "none"
    }

    await bot.editMessageReplyMarkup(
      { inline_keyboard: [[goButton], takeRow, [creditLabel]] },
      { chat_id: message.chat.id, message_id: message.message_id }
    )

    return bot.answerCallbackQuery(cbId)
  }

  // 3) –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–í—ã–¥–∞—Ç—å VIP¬ª
  if (action === "vip") {
    const adminName = from.username || from.first_name || "admin"
    const telegramName = buyerKey // —Ç–µ–ø–µ—Ä—å —ç—Ç–æ telegram_name

    console.log("VIP callback:", { orderId, telegramName, adminName })

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ Supabase –ø–æ telegram_name
    const { error: profileErr } = await supabase
      .from("profiles")
      .update({ is_vip: true, vip_given_by: adminName })
      .eq("telegram_name", telegramName)

    if (profileErr) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è VIP:", profileErr.message)
      return bot.answerCallbackQuery(cbId, { text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ VIP" })
    }

    const vipLabel = {
      text: `üåü VIP –≤—ã–¥–∞–ª: @${adminName}`,
      callback_data: "none"
    }

    await bot.editMessageReplyMarkup(
      {
        inline_keyboard: [
          [ { text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", url: `https://t.me/${telegramName}` } ],
          [ vipLabel ]
        ]
      },
      { chat_id: message.chat.id, message_id: message.message_id }
    )

    return bot.answerCallbackQuery(cbId, { text: "VIP –≤—ã–¥–∞–Ω" })
  }
})

// -------------------------
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
// -------------------------
bot.on("message", (msg) => {
  if (msg.text === "/start") {
    bot.sendMessage(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –∏ VIP-–∑–∞—è–≤–∫–∞–º–∏.")
  }
})

// -------------------------
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ VIP-–∑–∞—è–≤–∫–∏
// -------------------------
export async function sendVipRequest({ name, telegramUsername }) {
  const text = `
üåü –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ VIP
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${name} (@${telegramUsername})
–•–æ—á–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å VIP-–ø–æ–¥–ø–∏—Å–∫—É
  `.trim()

  const extra = {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å",
            url: `https://t.me/${telegramUsername}`
          }
        ],
        [
          {
            text: "–í—ã–¥–∞—Ç—å VIP",
            callback_data: `vip|${Date.now()}|${telegramUsername}` // —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ |
          }
        ]
      ]
    }
  }

  try {
    await bot.sendMessage(process.env.TELEGRAM_ADMIN_CHAT_ID, text, extra)
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ VIP-–∑–∞—è–≤–∫–∏:", err.message)
  }
}
