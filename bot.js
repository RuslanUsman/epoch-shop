// bot.js

import dotenv from "dotenv"
import TelegramBot from "node-telegram-bot-api"
import { createClient } from "@supabase/supabase-js"

dotenv.config()

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase-–∫–ª–∏–µ–Ω—Ç —Å service-role –∫–ª—é—á–æ–º
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true })

bot.on("callback_query", async (callbackQuery) => {
  const { id: cbId, data = "", message, from } = callbackQuery
  const parts  = data.split("_")
  const action = parts[0]              // "take" –∏–ª–∏ "credit"
  const orderId = parts[1]             // ID –∑–∞–∫–∞–∑–∞
  const buyerId = parts[2]             // UUID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
  const points  = action === "credit"  // —á–∏—Å–ª–æ –±–∞–ª–ª–æ–≤ –¥–ª—è credit
    ? parseInt(parts[3], 10) || 0
    : 0

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á—É–∂–∏–µ callback‚Äô—ã
  if (action !== "take" && action !== "credit") {
    return bot.answerCallbackQuery(cbId)
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
  const kb = message?.reply_markup?.inline_keyboard
  if (!kb) {
    return bot.answerCallbackQuery(cbId, { text: "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" })
  }

  const goButton  = kb[0][0]   // –∫–Ω–æ–ø–∫–∞ ¬´–ü–µ—Ä–µ–π—Ç–∏¬ª
  const takeRow   = kb[1]      // —Å—Ç—Ä–æ–∫–∞ —Å take-–∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –ª–µ–π–±–ª–æ–º ¬´üü¢ –í–∑—è–ª‚Ä¶¬ª
  const creditRow = kb[2]      // —Å—Ç—Ä–æ–∫–∞ —Å ¬´–ó–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã¬ª

  // 1) –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–í–∑—è—Ç—å –∑–∞–∫–∞–∑¬ª
  if (action === "take") {
    const adminName = from.username || from.first_name || "admin"
    const takeLabel = {
      text:          `üü¢ –í–∑—è–ª: @${adminName}`,
      callback_data: "none"
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º ReplyMarkup
    await bot.editMessageReplyMarkup(
      { inline_keyboard: [[goButton], [takeLabel], [creditRow[0]]] },
      { chat_id: message.chat.id, message_id: message.message_id }
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º, –∫—Ç–æ –≤–∑—è–ª –∑–∞–∫–∞–∑
    const { error: orderErr } = await supabase
      .from("orders")
      .update({
        taker_id:       from.id,
        taker_username: adminName
      })
      .eq("id", orderId)

    if (orderErr) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", orderErr.message)
    }

    return bot.answerCallbackQuery(cbId)
  }

  // 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–ó–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã¬ª
  if (action === "credit") {
    // a) –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã –ø—Ä–æ—Ñ–∏–ª—è
    const { data: profileData, error: selectErr } = await supabase
      .from("profiles")
      .select("points")
      .eq("id", buyerId)
      .single()

    if (selectErr) {
      console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", selectErr.message)
    }

    const currentPoints = profileData?.points || 0
    const newPoints     = currentPoints + points

    // b) –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å: —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –±–∞–ª–ª—ã
    const { error: profileErr } = await supabase
      .from("profiles")
      .update({ points: newPoints })
      .eq("id", buyerId)

    if (profileErr) {
      console.error("–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –ø—Ä–æ—Ñ–∏–ª—é:", profileErr.message)
    }

    // c) –§–∏–∫—Å–∏—Ä—É–µ–º –±–æ–Ω—É—Å –≤ –∑–∞–∫–∞–∑–µ
    const { error: orderErr } = await supabase
      .from("orders")
      .update({ bonus_given: points })
      .eq("id", orderId)

    if (orderErr) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –≤ –∑–∞–∫–∞–∑–µ:", orderErr.message)
    }

    // d) –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º ReplyMarkup: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ
    const creditLabel = {
      text:          `‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ ${points} –±–∞–ª–ª–æ–≤`,
      callback_data: "none"
    }

    await bot.editMessageReplyMarkup(
      { inline_keyboard: [[goButton], takeRow, [creditLabel]] },
      { chat_id: message.chat.id, message_id: message.message_id }
    )

    return bot.answerCallbackQuery(cbId)
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start)
bot.on("message", (msg) => {
  if (msg.text === "/start") {
    bot.sendMessage(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏.")
  }
})
