// src/lib/sendOrder.js

export async function sendOrder({
  orderId,
  buyerId,              // –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ ‚Äî UUID –ø—Ä–æ—Ñ–∏–ª—è
  name,
  telegramUsername,      // –¥–ª—è VIP ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–Ω–æ telegram_name
  text,
  bonus = 0,             // –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
  type = "order"         // "order" –∏–ª–∏ "vip"
}) {
  // –í Vite –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ import.meta.env
  const token  = import.meta.env.VITE_TELEGRAM_BOT_TOKEN
  const chatId = import.meta.env.VITE_TELEGRAM_ADMIN_CHAT_ID

  if (!token || !chatId) {
    throw new Error("–ù–µ –∑–∞–¥–∞–Ω—ã VITE_TELEGRAM_BOT_TOKEN –∏–ª–∏ VITE_TELEGRAM_ADMIN_CHAT_ID")
  }

  const apiUrl = `https://api.telegram.org/bot${token}/sendMessage`

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if (!orderId) throw new Error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω orderId –≤ sendOrder")
  if (!name) throw new Error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ name –≤ sendOrder")
  if (!telegramUsername) throw new Error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ telegramUsername –≤ sendOrder")
  if (typeof text !== "string" || text.trim().length === 0) {
    throw new Error("–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
  }
  if (text.length > 4000) {
    throw new Error("–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è Telegram")
  }
  if (type === "order") {
    if (!buyerId) throw new Error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω buyerId –≤ sendOrder (–¥–ª—è –∑–∞–∫–∞–∑–∞)")
    if (typeof bonus !== "number" || bonus < 0) {
      throw new Error("–ù–µ –ø–µ—Ä–µ–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π bonus –≤ sendOrder")
    }
  }

  // URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ ¬´–ü–µ—Ä–µ–π—Ç–∏¬ª
  const prefill    = `üë§ –ö–ª–∏–µ–Ω—Ç: ${name} (@${telegramUsername})`
  const profileUrl = `https://t.me/${telegramUsername}?text=${encodeURIComponent(prefill)}`

  let keyboard

  if (type === "order") {
    // –§–æ—Ä–º–∏—Ä—É–µ–º callback_data –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–∫–∞–∑–∞
    const takeData   = `take|${orderId}|${buyerId}`
    const creditData = `credit|${orderId}|${buyerId}|${bonus}`

    keyboard = {
      inline_keyboard: [
        [ { text: "–ü–µ—Ä–µ–π—Ç–∏", url: profileUrl } ],
        [ { text: "–í–∑—è—Ç—å –∑–∞–∫–∞–∑", callback_data: takeData } ],
        [ { text: "–ó–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã", callback_data: creditData } ]
      ]
    }
  } else if (type === "vip") {
    // –î–ª—è VIP-–∑–∞—è–≤–∫–∏: –∫–Ω–æ–ø–∫–∞ ¬´–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å¬ª –∏ ¬´–í—ã–¥–∞—Ç—å VIP¬ª
    const vipData = `vip|${orderId}|${telegramUsername}`

    keyboard = {
      inline_keyboard: [
        [ { text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å", url: `https://t.me/${telegramUsername}` } ],
        [ { text: "–í—ã–¥–∞—Ç—å VIP", callback_data: vipData } ]
      ]
    }
  }

  // –ü–µ–π–ª–æ–∞–¥ –¥–ª—è Telegram API
  const payload = {
    chat_id: chatId,
    text,
    parse_mode: "HTML",
    reply_markup: keyboard
  }

  try {
    const res = await fetch(apiUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    })

    const data = await res.json()
    console.log("Telegram API –æ—Ç–≤–µ—Ç:", data)

    if (!res.ok || !data.ok) {
      throw new Error(data.description || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
    }

    return data
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", err)
    throw err
  }
}
