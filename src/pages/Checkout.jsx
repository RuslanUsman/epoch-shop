// src/pages/Checkout.jsx
import React, { useState } from "react"
import { useNavigate } from "react-router-dom"
import { useCart } from "../context/CartContext"
import { useUser } from "../context/UserContext"
import { sendOrder } from "../lib/sendOrder"
import "./Checkout.css"

export default function Checkout() {
  const navigate = useNavigate()
  const { items, totalRubles, totalPoints, clearCart } = useCart()
  const { profile } = useUser()
  const { id: buyerId, name, telegram_name } = profile

  const [success, setSuccess] = useState(false)

  const handleCheckout = async () => {
    if (!items.length) {
      alert("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
      return
    }

    const orderId = Date.now()

    // —Å—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å—ã —Ç–æ–ª—å–∫–æ —Å —Ä—É–±–ª—ë–≤–æ–π —á–∞—Å—Ç–∏
    const rubleSum = items
      .filter(i => !i.payWithPoints)
      .reduce((sum, i) => {
        const priceRub = Number(i.item.priceRub) || 0
        return sum + priceRub * i.qty
      }, 0)

    const accruedBonus = Math.floor(rubleSum * 0.1)

    // –∏—Ç–æ–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const total = `${totalRubles} ‚ÇΩ + ${totalPoints} ü™ô`

    // –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞
    const now = new Date()
    const dateStr = now.toLocaleDateString("ru-RU")
    const timeStr = now.toLocaleTimeString("ru-RU", { hour: "2-digit", minute: "2-digit" })

    // —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    const itemLines = items
      .map(({ item, qty, payWithPoints }) => {
        const priceRub = Number(item.priceRub) || 0
        const pricePts = Number(item.pricePoints) || 0
        const priceLabel = payWithPoints ? `${pricePts} ü™ô` : `${priceRub} ‚ÇΩ`
        return [
          `‚Ä¢ ${item.name}`,
          `  –†–∞–∑–¥–µ–ª: ${item.category}`,
          `  –û–ø–∏—Å–∞–Ω–∏–µ: ${item.desc}`,
          `  –¶–µ–Ω–∞: ${priceLabel} √ó${qty}`,
        ].join("\n")
      })
      .join("\n\n")

    const text = `
üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderId}
üë§ –ö–ª–∏–µ–Ω—Ç: ${name} (@${telegram_name})
üÜî ID –ø—Ä–æ—Ñ–∏–ª—è: ${buyerId}
üïí –î–∞—Ç–∞: ${dateStr} ${timeStr}

${itemLines}

üí∞ –ò—Ç–æ–≥–æ: ${total}
üíµ –û–ø–ª–∞—á–µ–Ω–æ —Ä—É–±–ª—è–º–∏: ${totalRubles} ‚ÇΩ
ü™ô –û–ø–ª–∞—á–µ–Ω–æ –±–∞–ª–ª–∞–º–∏: ${totalPoints} ü™ô
üéÅ –ë–æ–Ω—É—Å –∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—é: ${accruedBonus} ü™ô
    `.trim()

    try {
      await sendOrder({
        orderId,
        buyerId,
        name,
        telegramUsername: telegram_name,
        text,
        bonus: accruedBonus
      })

      setSuccess(true)
      clearCart()

      // —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω
      setTimeout(() => navigate("/store", { replace: true }), 3000)
    } catch (err) {
      console.error(err)
      alert(err.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
    }
  }

  if (success) {
    return (
      <div className="checkout-page success">
        <div className="success-icon">‚úÖ</div>
        <h2>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</h2>
        <p>–ú—ã —É–∂–µ —É–≤–µ–¥–æ–º–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ Telegram</p>
      </div>
    )
  }

  return (
    <div className="checkout-page">
      <h2>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è {name}</h2>
      <p>–¢–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ: {items.length}</p>
      <p>–°—É–º–º–∞: {totalRubles} ‚ÇΩ / {totalPoints} ü™ô</p>
      <p>–í–æ–∑–º–æ–∂–Ω—ã–µ –±–æ–Ω—É—Å—ã: {Math.floor(
        items.filter(i => !i.payWithPoints)
             .reduce((sum, i) => sum + (Number(i.item.priceRub) || 0) * i.qty, 0) * 0.1
      )} ü™ô</p>
      <button className="checkout-btn" onClick={handleCheckout}>
        –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
      </button>
    </div>
  )
}
