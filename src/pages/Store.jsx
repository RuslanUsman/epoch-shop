// src/pages/Store.jsx
import React, { useState, useEffect } from "react";
import { useCart } from "../context/CartContext";
import { CATEGORIES, PRODUCTS } from "../data/products";
import { supabase } from "../lib/supabaseClient";
import "./Store.css";

// üëá –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
function ProductImage({ src, alt, size = 96 }) {
  const defaultUrl = `${import.meta.env.BASE_URL}images/default-product.png`;

  const finalSrc = src
    ? src.startsWith("http")
      ? src
      : `${import.meta.env.BASE_URL}${src.replace(/^\//, "")}`
    : defaultUrl;

  return (
    <img
      src={finalSrc}
      alt={alt || "–¢–æ–≤–∞—Ä"}
      className="product-img"
      style={{ width: size, height: size, objectFit: "contain" }}
      onError={(e) => {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${src}`);
        e.currentTarget.src = defaultUrl;
      }}
    />
  );
}

export default function Store() {
  const [activeCat, setActiveCat] = useState(CATEGORIES[0]);
  const {
    items: cartItems,
    addToCart,
    updateQty,
    togglePayWithPoints,
  } = useCart();

  // —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞)
  const [server, setServer] = useState(null);

  // —Ç–∏–∫–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
  const [nowTs, setNowTs] = useState(Date.now());

  // —Ç–æ–≤–∞—Ä—ã —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const products = PRODUCTS[activeCat] || [];

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    async function fetchServer() {
      const { data } = await supabase
        .from("server_state")
        .select("*")
        .eq("id", "main") // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π id –∑–∞–ø–∏—Å–∏
        .single();
      if (data) setServer(data);
      else setServer(null);
    }
    fetchServer();
  }, []);

  // –¢–∏–∫–µ—Ä: –æ–±–Ω–æ–≤–ª—è–µ—Ç nowTs –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã —Ç–∞–π–º–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö —Ç–∏–∫–∞–ª–∏
  useEffect(() => {
    const interval = setInterval(() => setNowTs(Date.now()), 1000);
    return () => clearInterval(interval);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞
  function getProductTimeLeft(product) {
    if (!server || !product.unlockHours) return "";
    const start = new Date(server.start_time).getTime();
    const unlockAt = start + product.unlockHours * 3600 * 1000;
    const diff = unlockAt - nowTs;
    if (diff <= 0) return "";
    const h = Math.floor(diff / 1000 / 3600);
    const m = Math.floor((diff / 1000) % 3600 / 60);
    const s = Math.floor((diff / 1000) % 60);
    return `${h}—á ${m}–º ${s}—Å`;
  }

  return (
    <div className="store-page">
      <div className="store-container">
        <h1 className="store-title">–ú–∞–≥–∞–∑–∏–Ω ¬´–≠–ø–æ—Ö–∞ –≤—ã–∂–∏–≤–∞–Ω–∏—è¬ª</h1>

        {/* —Ç–∞–±—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
        <nav className="category-tabs">
          {CATEGORIES.map((cat) => (
            <button
              key={cat}
              className={`tab ${cat === activeCat ? "active" : ""}`}
              onClick={() => setActiveCat(cat)}
            >
              {cat}
            </button>
          ))}
        </nav>

        {/* —Å–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ */}
        <div className="products-grid">
          {products.map((product) => {
            // –∑–∞–ø–∏—Å—å –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ id —Ç–æ–≤–∞—Ä–∞
            const entry =
              cartItems.find((e) => e.item.id === product.id) || {
                qty: 0,
                payWithPoints: false,
              };

            // –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            const productTimeLeft = getProductTimeLeft(product);
            const isLocked = !!productTimeLeft;

            return (
              <div
                key={product.id}
                className={`product-card ${entry.qty > 0 ? "in-cart" : ""}`}
              >
                <ProductImage src={product.img} alt={product.name} size={96} />

                <h3 className="product-name">{product.name}</h3>
                <p className="product-desc">{product.desc}</p>

                <div className="price">
                  {!entry.payWithPoints && product.priceRub != null && (
                    <span className="price-rub">{product.priceRub} ‚ÇΩ</span>
                  )}
                  <span className="price-points">
                    {product.pricePoints} ü™ô
                  </span>
                </div>

                <label className="pay-checkbox">
                  <input
                    type="checkbox"
                    checked={entry.payWithPoints}
                    onChange={() => togglePayWithPoints(product.id)}
                    disabled={isLocked}
                  />
                  –û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–ª–∞–º–∏
                </label>

                <div className="qty-controls">
                  {isLocked ? (
                    <p className="wait-text">
                      ‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {productTimeLeft}
                    </p>
                  ) : entry.qty > 0 ? (
                    <>
                      <button
                        className="qty-btn"
                        onClick={() => updateQty(product.id, -1)}
                      >
                        ‚Äì
                      </button>
                      <span className="qty-number">{entry.qty}</span>
                      <button
                        className="qty-btn"
                        onClick={() => updateQty(product.id, +1)}
                      >
                        +
                      </button>
                    </>
                  ) : (
                    <button
                      className="add-btn"
                      onClick={() => addToCart(product)}
                      aria-label="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
                    >
                      <span className="add-icon">üõí</span>
                    </button>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}
