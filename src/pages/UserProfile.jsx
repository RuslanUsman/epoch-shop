// src/pages/UserProfile.jsx
import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { supabase } from "../lib/supabaseClient";
import "./UserProfile.css";
import {
  FaUserMinus,
  FaUserPlus,
  FaRegCommentDots,
  FaGift,
  FaCrown,
} from "react-icons/fa";
import Avatar from "../components/Avatar";

const UserProfile = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [giftPoints, setGiftPoints] = useState("");
  const [currentUser, setCurrentUser] = useState(null);
  const [errorMsg, setErrorMsg] = useState("");

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const fetchCurrentUser = async () => {
      const { data: { user }, error } = await supabase.auth.getUser();
      if (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message);
        return;
      }
      if (user) {
        const { data, error: profileError } = await supabase
          .from("profiles")
          .select("*")
          .eq("id", user.id)
          .single();
        if (!profileError && data) setCurrentUser(data);
      }
    };
    fetchCurrentUser();
  }, []);
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–æ–≥–æ, –Ω–∞ –∫–æ–≥–æ –∑–∞—à–ª–∏
  useEffect(() => {
    const fetchUser = async () => {
      console.log("–ò—â—É –ø—Ä–æ—Ñ–∏–ª—å –ø–æ id –∏–∑ URL:", id);
      setLoading(true);
      setErrorMsg("");

      const { data, error } = await supabase
        .from("profiles")
        .select("*")
        .eq("id", id)
        .maybeSingle();

      if (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error.message);
        setErrorMsg("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è");
        setUser(null);
      } else if (!data) {
        console.warn("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è id:", id);
        setErrorMsg("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        setUser(null);
      } else {
        setUser(data);
      }
      setLoading(false);
    };
    if (id) fetchUser();
  }, [id]);

  // üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã
  const handleGift = async () => {
    if (!giftPoints || isNaN(giftPoints)) return;
    const pointsToGift = parseInt(giftPoints, 10);

    if (!currentUser) {
      alert("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É");
      return;
    }

    if ((currentUser?.points ?? 0) < pointsToGift) {
      alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞");
      return;
    }

    const { error: senderError } = await supabase
      .from("profiles")
      .update({ points: (currentUser?.points ?? 0) - pointsToGift })
      .eq("id", currentUser.id);

    if (senderError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤:", senderError.message);
      return;
    }

    const { error: receiverError } = await supabase
      .from("profiles")
      .update({ points: (user?.points ?? 0) + pointsToGift })
      .eq("id", user.id);

    if (receiverError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤:", receiverError.message);
      return;
    }

    await supabase.from("point_transfers").insert([
      {
        from_user: currentUser.id,
        to_user: user.id,
        amount: pointsToGift,
        created_at: new Date(),
      },
    ]);

    setCurrentUser((prev) => ({ ...prev, points: (prev?.points ?? 0) - pointsToGift }));
    setUser((prev) => ({ ...prev, points: (prev?.points ?? 0) + pointsToGift }));

    alert(`–í—ã –ø–æ–¥–∞—Ä–∏–ª–∏ ${pointsToGift} –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user?.name ?? ""}`);
    setGiftPoints("");
  };
  // üëë –í—ã–¥–∞—Ç—å/—Å–Ω—è—Ç—å VIP (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
  const toggleVip = async () => {
    if (!currentUser?.is_admin) {
      alert("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è VIP");
      return;
    }
    const { error } = await supabase
      .from("profiles")
      .update({ is_vip: !user?.is_vip })
      .eq("id", user.id);

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ VIP:", error.message);
      return;
    }

    setUser((prev) => ({ ...prev, is_vip: !prev?.is_vip }));
  };

  // üë• –î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π
  const handleFriend = async () => {
    if (!currentUser) return;

    if (user?.is_friend) {
      // –£–¥–∞–ª—è–µ–º –∏–∑ –¥—Ä—É–∑–µ–π
      await supabase
        .from("friends")
        .delete()
        .or(
          `and(user_id.eq.${currentUser.id},friend_id.eq.${user.id}),and(user_id.eq.${user.id},friend_id.eq.${currentUser.id})`
        );
      setUser((prev) => ({ ...prev, is_friend: false }));
      alert("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ –¥—Ä—É–∑–µ–π");
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
      await supabase.from("friend_requests").insert({
        from_id: currentUser.id,
        to_id: user.id,
        status: "pending",
      });
      alert("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
    }
  };

  // üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ friends
  useEffect(() => {
    if (!currentUser) return;

    const channel = supabase
      .channel("friends-changes")
      .on(
        "postgres_changes",
        { event: "*", schema: "public", table: "friends" },
        (payload) => {
          const { new: newRow, old: oldRow } = payload || {};

          const affected =
            (newRow?.user_id === currentUser.id && newRow?.friend_id === id) ||
            (newRow?.friend_id === currentUser.id && newRow?.user_id === id) ||
            (oldRow?.user_id === currentUser.id && oldRow?.friend_id === id) ||
            (oldRow?.friend_id === currentUser.id && oldRow?.user_id === id);

          if (affected) {
            if (payload.eventType === "INSERT") {
              setUser((prev) => ({ ...prev, is_friend: true }));
            } else if (payload.eventType === "DELETE") {
              setUser((prev) => ({ ...prev, is_friend: false }));
            }
          }
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [currentUser, id]);
  // üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  const handleMessage = async () => {
    if (!currentUser) {
      alert("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É");
      return;
    }

    const { data: existingDialog, error: findError } = await supabase
      .from("dialogs")
      .select("*")
      .or(
        `and(user1.eq.${currentUser.id},user2.eq.${user.id}),and(user1.eq.${user.id},user2.eq.${currentUser.id})`
      )
      .maybeSingle();

    if (findError) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–∞:", findError.message);
    }

    let dialogId = existingDialog?.id;

    if (!dialogId) {
      const { data: newDialog, error: createError } = await supabase
        .from("dialogs")
        .insert([{ user1: currentUser.id, user2: user.id }])
        .select()
        .single();

      if (createError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞:", createError.message);
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥");
        return;
      }
      dialogId = newDialog.id;
    }

    navigate(`/messages/${dialogId}`);
  };

  if (loading) return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>;
  if (errorMsg) return <p>{errorMsg}</p>;

  return (
    <div className="userprofile-page">
      <div className="userprofile-card">
        <div className="userprofile-info">
          <Avatar src={user?.avatar_url} size={128} />
          <h2 className="userprofile-name">
            {user?.name} {user?.is_vip && <FaCrown color="gold" />}
          </h2>
          <p className="userprofile-username">@{user?.telegram_name}</p>
          <p className="userprofile-points">
            –ë–∞–ª–ª—ã: <span>{user?.points ?? 0}</span>
          </p>

          <div className="userprofile-actions">
            <button className="btn-friend" onClick={handleFriend}>
              {user?.is_friend ? <FaUserMinus /> : <FaUserPlus />}
              {user?.is_friend ? "–£–¥–∞–ª–∏—Ç—å –∏–∑ –¥—Ä—É–∑–µ–π" : "–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è"}
            </button>

            <button className="btn-message" onClick={handleMessage}>
              <FaRegCommentDots /> –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            </button>

            {currentUser?.is_admin && (
              <button className="btn-vip" onClick={toggleVip}>
                {user?.is_vip ? "–°–Ω—è—Ç—å VIP" : "–í—ã–¥–∞—Ç—å VIP"}
              </button>
            )}
          </div>
        </div>

        <div className="userprofile-gift">
          <h3>
            <FaGift /> –ü–æ–¥–∞—Ä–∏—Ç—å –±–∞–ª–ª—ã
          </h3>
          <input
            type="number"
            value={giftPoints}
            onChange={(e) => setGiftPoints(e.target.value)}
            placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
          />
          <button onClick={handleGift}>–ü–æ–¥–∞—Ä–∏—Ç—å</button>
        </div>
      </div>
    </div>
  );
};

export default UserProfile;






